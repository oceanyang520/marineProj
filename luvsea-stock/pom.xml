<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.luvsea</groupId>
    <artifactId>luvsea</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>luvsea-stock</artifactId>
  <packaging>war</packaging>
    <dependencies>
    <dependency>
        <groupId>com.luvsea</groupId>
        <artifactId>luvsea-wechat</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </dependency>
  </dependencies>
  
 <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <env>dev</env>
                <myName>dev</myName>
            </properties>
            <activation><!--默认激活-->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <env>test</env><!--相当于定义一个变量 供下面使用-->
                <myName>test</myName><!--使用一个properties文件中未定义，但是其他地方会取值的变量-->
            </properties>
        </profile>
        <profile>
            <id>product</id>
            <properties>
                <env>product</env>
            </properties>
        </profile>
  </profiles>
  <build>
    <finalName>luvsea-stock</finalName>
      <filters><!--获得过滤使用的源文件  即有实际数据的地反-->
          <filter>src/main/resources/properties/jdbc/${env}.properties</filter>
          <filter>src/main/resources/properties/wx/${env}.properties</filter>
      </filters>
       <!-- 指定 src/main/resources下所有文件及文件夹为资源文件 -->
      <resources>
         <resource>
            <directory>src/main/resources</directory>
              <includes> 
                 <include>**/*</include> 
            </includes> 
         </resource>
          <!-- 第二中方式 设置对dev.properties，等进行过虑，即这些文件中的${key}会被替换掉为真正的值-->
          <!-- jdbc -->
         <resource>
              <directory>src/main/resources/properties/jdbc</directory><!-- 一定要指向上层目录 -->
              <includes>
                  <include>dev.properties</include>
                  <include>product.properties</include>
                  <include>test.properties</include>
                  <include>db.properties</include>
              </includes>
              <filtering>true</filtering>
         </resource>
          <!-- wechat -->
         <resource>
              <directory>src/main/resources/properties/wx</directory>
              <includes>
                  <include>dev.properties</include>
                  <include>product.properties</include>
                  <include>test.properties</include>
                  <include>wx.properties</include>
              </includes>
              <filtering>true</filtering>
         </resource>
     </resources>
        <plugins>
          <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <encoding>UTF-8</encoding>
                    <showWarnings>true</showWarnings>
                    <compilerId>eclipse</compilerId>  
                </configuration>
                <dependencies>  
                    <dependency>  
                        <groupId>org.codehaus.plexus</groupId>  
                        <artifactId>plexus-compiler-eclipse</artifactId>  
                        <version>2.2</version>  
                    </dependency>  
                </dependencies> 
            </plugin>
<!--             jetty -->
                 <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>maven-jetty-plugin</artifactId>
                <version>6.1.5</version>
                <configuration>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <stopKey>foo</stopKey>
                    <stopPort>9999</stopPort>
                    <webAppConfig>
                        <contextPath>/blog</contextPath>
                        <defaultsDescriptor>src/main/resources/webdefault.xml</defaultsDescriptor>
                    </webAppConfig>
                    <systemProperties>
                        <systemProperty>
                            <name>jetty.port</name>
                            <value>8083</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
            </plugin>
<!--             tomcat -->
             <plugin>
            <groupId>org.apache.tomcat.maven</groupId>
            <artifactId>tomcat7-maven-plugin</artifactId>
            <version>2.0-SNAPSHOT</version>
            <configuration>
                <url>http://localhost:8084/manage/login</url> 
                <server>tomcat</server>
                <port>9999</port> 
            </configuration>
              </plugin>
        <!-- MyBatis代码生成 -->  
 <plugin>
    <groupId>org.mybatis.generator</groupId>
    <artifactId>mybatis-generator-maven-plugin</artifactId>
    <version>1.3.2</version>
    <configuration>
         <skip>true</skip>  
        <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>
        <verbose>true</verbose>
        <overwrite>true</overwrite>
    </configuration>
    <executions>
        <execution>
<!--                 放开注释表示不自动生成dao代码，但是如果显示执行general命令将仍然执行代码生成 -->
        <phase>none</phase>
            <id>Generate MyBatis Artifacts</id>
            <goals>
                <goal>generate</goal>
            </goals>
        </execution>
    </executions>
    <dependencies>
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.2</version>
        </dependency>
    </dependencies>
</plugin>   
    </plugins>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                    <skip>true</skip>  
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.mybatis.generator
                                        </groupId>
                                        <artifactId>
                                            mybatis-generator-maven-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.3.2,)
                                        </versionRange>
                                        <goals>
                                            <goal>generate</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
  </build>
</project>